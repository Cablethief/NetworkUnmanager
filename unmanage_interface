#!/bin/bash


NETWORKMANAGER_CONF="/etc/NetworkManager/NetworkManager.conf"

print_usage(){ 
    printf "A tool to manage/unmanage a interface in Network manager\n"
    printf "This is done by adding a [keyfile] section to your \"/etc/NetworkManager/NetworkManager.conf\"\n"
    printf "unmanageing the interface with \"unmanaged-devices=interface-name:<interface>\"\n"
    printf "and then restarting Network Manager. \n"
    printf "When run a second time on the interface it will delete the line.\n"
    printf "\n"
    printf "Usage: sudo $0 -i <interface whitelist/manage in Network Manager>\n" 
}

if [[ ! $@ =~ ^\-.+ ]]
then
  print_usage
  exit
fi

while getopts 'i:h' flag; do
  case "${flag}" in
    i) interface="${OPTARG}" ;;
    h) print_usage
       exit 1 ;;
    *) print_usage
       exit 1 ;;
    :) echo "${OPTARG} requires an argument"; 
       exit 1 ;; 
  esac
done

if (( $EUID != 0 )); then
    printf "Please run as root\n"
    exit
fi

is_interface() {
    [[ -z "$1" ]] && return 1
    [[ -d "/sys/class/net/${1}" ]]
}

networkmanager_iface_is_unmanaged() {
    is_interface "$1" || return 2
    (nmcli -t -f DEVICE,STATE d 2>&1 | grep -E "^$1:unmanaged$" > /dev/null 2>&1) || return 1
}

networkmanager_add_unmanaged() {
    local MAC UNMANAGED WAS_EMPTY x

    [[ -d ${NETWORKMANAGER_CONF%/*} ]] || mkdir -p ${NETWORKMANAGER_CONF%/*}
    [[ -f ${NETWORKMANAGER_CONF} ]] || touch ${NETWORKMANAGER_CONF}

    UNMANAGED=$(grep -m1 -Eo '^unmanaged-devices=[[:alnum:]:;,-]*' /etc/NetworkManager/NetworkManager.conf)

    WAS_EMPTY=0
    [[ -z "$UNMANAGED" ]] && WAS_EMPTY=1
    UNMANAGED=$(echo "$UNMANAGED" | sed 's/unmanaged-devices=//' | tr ';,' ' ')

    # if it exists, do nothing
    for x in $UNMANAGED; do
        if [[ $x == "mac:${MAC}" ]] ||
               [[ $x == "interface-name:${1}" ]]; then
            return 2
        fi
    done


    UNMANAGED="${UNMANAGED} interface-name:${1}"


    UNMANAGED=$(echo $UNMANAGED | sed -e 's/^ //')
    UNMANAGED="${UNMANAGED// /;}"
    UNMANAGED="unmanaged-devices=${UNMANAGED}"

    if ! grep -E '^\[keyfile\]' ${NETWORKMANAGER_CONF} > /dev/null 2>&1; then
        echo -e "\n\n[keyfile]\n${UNMANAGED}" >> ${NETWORKMANAGER_CONF}
    elif [[ $WAS_EMPTY -eq 1 ]]; then
        sed -e "s/^\(\[keyfile\].*\)$/\1\n${UNMANAGED}/" -i ${NETWORKMANAGER_CONF}
    else
        sed -e "s/^unmanaged-devices=.*/${UNMANAGED}/" -i ${NETWORKMANAGER_CONF}
    fi

    ADDED_UNMANAGED="${ADDED_UNMANAGED} ${1} "

    local nm_pid=$(pidof NetworkManager)
    [[ -n "$nm_pid" ]] && kill -HUP $nm_pid

    return 0
}

networkmanager_rm_unmanaged() {
    local MAC UNMANAGED
    [[ ! -f ${NETWORKMANAGER_CONF} ]] && return 1

    UNMANAGED=$(grep -m1 -Eo '^unmanaged-devices=[[:alnum:]:;,-]*' /etc/NetworkManager/NetworkManager.conf | sed 's/unmanaged-devices=//' | tr ';,' ' ')

    if [[ -z "$UNMANAGED" ]]; then
        return 1
    fi

    [[ -n "$MAC" ]] && UNMANAGED=$(echo $UNMANAGED | sed -e "s/mac:${MAC}\( \|$\)//g")
    UNMANAGED=$(echo $UNMANAGED | sed -e "s/interface-name:${1}\( \|$\)//g")
    UNMANAGED=$(echo $UNMANAGED | sed -e 's/ $//')

    if [[ -z "$UNMANAGED" ]]; then
        sed -e "/^unmanaged-devices=.*/d" -i ${NETWORKMANAGER_CONF}
    else
        UNMANAGED="${UNMANAGED// /;}"
        UNMANAGED="unmanaged-devices=${UNMANAGED}"
        sed -e "s/^unmanaged-devices=.*/${UNMANAGED}/" -i ${NETWORKMANAGER_CONF}
    fi

    ADDED_UNMANAGED="${ADDED_UNMANAGED/ ${1} /}"

    local nm_pid=$(pidof NetworkManager)
    [[ -n "$nm_pid" ]] && kill -HUP $nm_pid

    return 0
}



if networkmanager_iface_is_unmanaged $interface; then
    echo "Un-unmanaging interface $interface"
    networkmanager_rm_unmanaged $interface
else
    echo "Unmanaging interface $interface"
    networkmanager_add_unmanaged $interface
fi